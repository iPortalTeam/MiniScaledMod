plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'

	id 'io.github.juuxel.loom-vineflower' version '1.11.0' // https://github.com/Juuxel/loom-vineflower
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenLocal()

	maven { url 'https://jitpack.io' }

	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	// for parchment
	maven {
		url = "https://maven.parchmentmc.org"
	}

	maven {
		name = 'Ladysnake'
		url = 'https://maven.ladysnake.org/releases'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings() {
			setNameSyntheticMembers(false)
		}
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// maven local
//	modImplementation('qouteall:imm_ptl_core:3.3.1.7')
//	modImplementation('qouteall:q_misc_util:3.3.1.7')

	modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${immptl_version}"){
//		exclude(group: "maven.modrinth")
	}
	modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${immptl_version}") {
//		exclude(group: "maven.modrinth")
	}
	modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:build:${immptl_version}") {
//		exclude(group: "maven.modrinth")
	}

	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "maven.modrinth:modmenu:${modmenu_version}"

	include "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"

	modLocalRuntime "${project.sodium_path}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

//jar {
//	from("LICENSE") {
//		rename { "${it}_${project.archivesBaseName}"}
//	}
//}

afterEvaluate {
	remapJar {
		archiveFileName = "${archivesBaseName}-${project.mod_version}-mc${project.minecraft_version}-fabric.jar"
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
